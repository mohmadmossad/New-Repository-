
import 'package:flutter/material.dart';
import '../services/db_simple.dart';

class JournalEntriesScreen extends StatefulWidget { const JournalEntriesScreen({super.key}); @override State<JournalEntriesScreen> createState() => _JournalEntriesScreenState(); }
class _JournalEntriesScreenState extends State<JournalEntriesScreen> {
  List<Map<String,dynamic>> entries=[]; List<Map<String,dynamic>> accounts=[]; final date=TextEditingController(), desc=TextEditingController();
  List<_Row> rows = [];
  @override void initState(){ super.initState(); _load(); }
  Future<void> _load() async { final db=await DB.db; entries = await db.rawQuery('SELECT je.id, je.date, je.description, SUM(jl.debit) as debit, SUM(jl.credit) as credit FROM journal_entries je LEFT JOIN journal_lines jl ON je.id=jl.entry_id GROUP BY je.id ORDER BY je.date DESC'); accounts = await db.query('chart_of_accounts', orderBy:'code ASC'); if(rows.isEmpty) rows.add(_Row()); setState((){}); }
  void _addRow(){ setState(()=> rows.add(_Row())); }
  void _removeRow(int i){ setState(()=> rows.removeAt(i)); }
  double _sumDebit(){ double s=0; for(final r in rows) s+= double.tryParse(r.debit.text) ?? 0; return s; }
  double _sumCredit(){ double s=0; for(final r in rows) s+= double.tryParse(r.credit.text) ?? 0; return s; }
  Future<void> _save() async { final db=await DB.db; final sd=_sumDebit(), sc=_sumCredit(); if(sd==0 && sc==0){ ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('أضف أسطرًا'))); return;} if(sd!=sc){ ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('المدين يجب أن يساوي الدائن'))); return;} final entryId = await db.insert('journal_entries', {'date': date.text,'description':desc.text}); for(final r in rows){ final acc = r.accountId; if(acc==null) continue; await db.insert('journal_lines', {'entry_id':entryId,'account_id':acc,'debit': double.tryParse(r.debit.text) ?? 0,'credit': double.tryParse(r.credit.text) ?? 0}); } date.clear(); desc.clear(); rows = [_Row()]; _load(); ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('تم حفظ القيد'))); }
  @override Widget build(BuildContext c){ return Scaffold(appBar: AppBar(title: const Text('القيود اليومية')), body: Column(children:[ Padding(padding: const EdgeInsets.all(8), child: Column(children:[ TextField(controller: date, decoration: const InputDecoration(labelText:'التاريخ')), TextField(controller: desc, decoration: const InputDecoration(labelText:'الوصف')), const SizedBox(height:8), const Text('أسطر القيد'), ListView.builder(shrinkWrap:true, physics: const NeverScrollableScrollPhysics(), itemCount: rows.length, itemBuilder: (_,i){ final r=rows[i]; return Row(children:[ Expanded(child: DropdownButtonFormField<int>(value: r.accountId, items: accounts.map((a)=> DropdownMenuItem<int>(value: a['id'], child: Text('${a['code']} - ${a['name']}'))).toList(), onChanged: (v)=> setState(()=> r.accountId=v))), const SizedBox(width:8), Expanded(child: TextField(controller: r.debit, decoration: const InputDecoration(labelText:'مدين'), keyboardType: TextInputType.number)), const SizedBox(width:8), Expanded(child: TextField(controller: r.credit, decoration: const InputDecoration(labelText:'دائن'), keyboardType: TextInputType.number)), IconButton(icon: const Icon(Icons.remove_circle), onPressed: ()=> _removeRow(i)) ]); }), Row(children:[ ElevatedButton(onPressed: _addRow, child: const Text('إضافة سطر')), const SizedBox(width:8), ElevatedButton(onPressed: _save, child: const Text('حفظ القيد')), const SizedBox(width:8), Text('مدين: ${_sumDebit().toStringAsFixed(2)} | دائن: ${_sumCredit().toStringAsFixed(2)}') ]), ])), const Divider(), Expanded(child: ListView.builder(itemCount: entries.length,itemBuilder: (_,i){ final e=entries[i]; return ListTile(title: Text('${e['date']} - ${e['description']}'), subtitle: Text('مدين: ${e['debit'] ?? 0} | دائن: ${e['credit'] ?? 0}')); })) ])); }
}
class _Row { int? accountId; final TextEditingController debit = TextEditingController(); final TextEditingController credit = TextEditingController(); }
