
import 'package:flutter/material.dart';
import '../services/db_simple.dart';

class PaymentVouchersScreen extends StatefulWidget { const PaymentVouchersScreen({super.key}); @override State<PaymentVouchersScreen> createState() => _PaymentVouchersScreenState(); }
class _PaymentVouchersScreenState extends State<PaymentVouchersScreen> {
  List<Map<String,dynamic>> vouchers = []; List<Map<String,dynamic>> suppliers = []; int? selectedSupplier; final date=TextEditingController(), amount=TextEditingController(), desc=TextEditingController();
  @override void initState(){ super.initState(); _load(); }
  Future<void> _load() async { final db=await DB.db; vouchers = await db.rawQuery('SELECT pv.*, s.name as supplier_name FROM payment_vouchers pv LEFT JOIN suppliers s ON pv.supplier_id=s.id ORDER BY pv.date DESC'); suppliers = await db.query('suppliers', orderBy:'name ASC'); setState((){}); }
  Future<void> _add() async { if(selectedSupplier==null) return; final db=await DB.db; final amt = double.tryParse(amount.text)??0; if(amt<=0) return; await db.insert('payment_vouchers', {'date':date.text,'amount':amt,'supplier_id':selectedSupplier,'description':desc.text}); await db.rawUpdate('UPDATE suppliers SET balance = balance - ? WHERE id=?', [amt, selectedSupplier]); await db.transaction((txn) async { final entry = await txn.insert('journal_entries', {'date':date.text,'description':'سند صرف '+desc.text}); await txn.insert('journal_lines', {'entry_id':entry,'account_id':2000,'debit':amt,'credit':0}); await txn.insert('journal_lines', {'entry_id':entry,'account_id':1000,'debit':0,'credit':amt}); }); date.clear(); amount.clear(); desc.clear(); selectedSupplier=null; _load(); }
  Future<void> _delete(int id,double amt,int supplierId) async { final db=await DB.db; await db.delete('payment_vouchers', where:'id=?', whereArgs:[id]); await db.rawUpdate('UPDATE suppliers SET balance = balance + ? WHERE id=?', [amt, supplierId]); _load(); }
  @override Widget build(BuildContext c){ return Scaffold(appBar: AppBar(title: const Text('سندات الصرف')), body: Column(children:[ Padding(padding: const EdgeInsets.all(8), child: Column(children:[ DropdownButtonFormField<int>(value:selectedSupplier, hint: const Text('اختر مورد'), items: suppliers.map((s)=> DropdownMenuItem<int>(value:s['id'], child: Text(s['name']))).toList(), onChanged:(v)=> setState(()=> selectedSupplier=v)), TextField(controller: date, decoration: const InputDecoration(labelText:'التاريخ')), TextField(controller: amount, decoration: const InputDecoration(labelText:'المبلغ'), keyboardType: TextInputType.number), TextField(controller: desc, decoration: const InputDecoration(labelText:'الوصف')), const SizedBox(height:8), ElevatedButton(onPressed:_add, child: const Text('إضافة')) ])), Expanded(child: ListView.builder(itemCount:vouchers.length,itemBuilder:(_,i){ final v=vouchers[i]; return ListTile(title: Text('${v['supplier_name'] ?? ''} - ${v['amount']}'), subtitle: Text('${v['date']} - ${v['description'] ?? ''}'), trailing: IconButton(icon: const Icon(Icons.delete), onPressed: ()=> _delete(v['id'], v['amount'], v['supplier_id']))); })) ])); }
}
